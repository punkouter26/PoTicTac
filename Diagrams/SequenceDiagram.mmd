sequenceDiagram
    actor User
    participant UI as Blazor UI<br/>(Home.razor)
    participant GameBoard as GameBoard<br/>Component
    participant GameLogic as GameLogicService
    participant AILogic as AILogicService
    participant SignalR as SignalRService
    participant Hub as GameHub<br/>(Server)
    participant Stats as StatisticsService
    participant API as StatisticsController
    participant Storage as StorageService
    participant Azure as Azure Table<br/>Storage
    
    Note over User,Azure: Single Player Game Flow
    
    User->>UI: Click cell (row, col)
    UI->>GameBoard: OnCellClick(row, col)
    GameBoard->>UI: Emit cell click event
    UI->>GameLogic: MakeMove(row, col)
    
    GameLogic->>GameLogic: ValidateMove()
    alt Move is valid
        GameLogic->>GameLogic: UpdateBoard()
        GameLogic->>GameLogic: CheckWinner()
        GameLogic-->>UI: Return updated GameState
        UI->>UI: StateHasChanged()
        UI-->>User: Display updated board
        
        alt Game not over
            Note over UI,AILogic: AI Turn
            UI->>AILogic: GetAIMove(gameState, difficulty)
            AILogic->>AILogic: Calculate best move<br/>(Easy/Medium/Hard strategy)
            AILogic-->>UI: Return AI move position
            UI->>GameLogic: MakeMove(AI position)
            GameLogic->>GameLogic: UpdateBoard()
            GameLogic->>GameLogic: CheckWinner()
            GameLogic-->>UI: Return updated GameState
            UI->>UI: StateHasChanged()
            UI-->>User: Display AI move
        end
        
        alt Game Over (Win/Draw)
            Note over UI,Azure: Update Statistics
            UI->>Stats: UpdatePlayerStats(playerName, result)
            Stats->>API: POST /api/statistics/{playerName}
            API->>Storage: UpdatePlayerStats(playerName, result)
            Storage->>Azure: UpsertEntityAsync(PlayerEntity)
            Azure-->>Storage: Success
            Storage-->>API: PlayerStats
            API-->>Stats: PlayerStats DTO
            Stats-->>UI: Success
            UI-->>User: Show game result
        end
    else Move is invalid
        GameLogic-->>UI: Return error
        UI-->>User: Show error message
    end
    
    Note over User,Azure: Multiplayer Game Flow
    
    User->>UI: Click cell (row, col)
    UI->>GameBoard: OnCellClick(row, col)
    GameBoard->>UI: Emit cell click event
    UI->>SignalR: SendMove(gameId, position)
    SignalR->>Hub: MakeMove(gameId, position)
    
    Hub->>Hub: ValidateMove()
    Hub->>Hub: UpdateGameState()
    Hub->>Hub: CheckWinner()
    
    Hub->>SignalR: BroadcastMove(gameState)
    SignalR->>UI: Receive updated state
    UI->>UI: StateHasChanged()
    UI-->>User: Display updated board
    
    alt Game Over
        Hub->>Hub: Calculate stats
        Hub->>Storage: UpdatePlayerStats()
        Storage->>Azure: UpsertEntityAsync()
        Azure-->>Storage: Success
        Hub->>SignalR: BroadcastGameOver(result)
        SignalR->>UI: Receive game result
        UI-->>User: Show game result
    end
    
    Note over User,Azure: View Statistics
    
    User->>UI: Navigate to /stats
    UI->>Stats: GetAllPlayerStatistics()
    Stats->>API: GET /api/statistics
    API->>Storage: GetAllPlayerStats()
    Storage->>Azure: QueryAsync(filter)
    Azure-->>Storage: List of PlayerEntity
    Storage-->>API: List of PlayerStats
    API-->>Stats: List of PlayerStatsDto
    Stats-->>UI: Player statistics
    UI-->>User: Display statistics grid
