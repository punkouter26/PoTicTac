classDiagram
    class GameBoardState {
        +PlayerType[,] Board
        +PlayerType CurrentPlayer
        +GameStatus GameStatus
        +PlayerType? Winner
        +Player[] Players
        +List~Move~ MoveHistory
        +List~Move~ UndoStack
        +List~Move~ RedoStack
        +List~int[]~ WinningCells
        +SessionStats SessionStats
        +const int BoardSize = 6
        +PlayerType[,] Cells
    }
    
    class Player {
        +string Id
        +string Name
        +PlayerType Type
        +PlayerType Symbol
        +AIConfig? AiConfig
        +PlayerStats Stats
    }
    
    class Move {
        +PlayerType Player
        +int[] Position
        +long Timestamp
    }
    
    class PlayerStats {
        +int TotalGames
        +int Wins
        +int Losses
        +int Draws
        +double WinRate
        +int WinStreak
        +int CurrentStreak
        +double AverageMovesPerGame
        +int TotalMoves
        +double AverageGameLength
        +List~FavoriteMove~ FavoriteMoves
        +List~WinningPattern~ WinningPatterns
        +List~PerformanceRecord~ PerformanceHistory
    }
    
    class FavoriteMove {
        +string Position
        +int Count
    }
    
    class WinningPattern {
        +string Pattern
        +int Count
    }
    
    class PerformanceRecord {
        +DateTime Date
        +string Result
        +int GameLength
    }
    
    class AIConfig {
        +Difficulty Difficulty
        +int? ThinkingTime
    }
    
    class SessionStats {
        +int TotalGames
        +long StartTime
        +long LastUpdateTime
    }
    
    class GameStatus {
        <<enumeration>>
        Playing
        Won
        Draw
    }
    
    class PlayerType {
        <<enumeration>>
        X
        O
        None
        Draw
        Human
        AI
    }
    
    class Difficulty {
        <<enumeration>>
        Easy
        Medium
        Hard
    }
    
    class GameMode {
        <<enumeration>>
        Singleplayer
        Multiplayer
        Tournament
        Practice
    }
    
    class PlayerEntity {
        +string PartitionKey
        +string RowKey
        +string Name
        +string Stats
        +string LastUpdated
        +DateTimeOffset? Timestamp
        +ETag ETag
    }
    
    %% Relationships
    GameBoardState "1" --> "2" Player : contains
    GameBoardState "1" --> "*" Move : tracks
    GameBoardState "1" --> "1" SessionStats : has
    GameBoardState --> GameStatus : uses
    GameBoardState --> PlayerType : uses
    
    Player "1" --> "1" PlayerStats : has
    Player --> PlayerType : uses
    Player "1" --> "0..1" AIConfig : may have
    
    Move --> PlayerType : identifies player
    
    PlayerStats "1" --> "*" FavoriteMove : tracks
    PlayerStats "1" --> "*" WinningPattern : tracks
    PlayerStats "1" --> "*" PerformanceRecord : tracks
    
    AIConfig --> Difficulty : uses
    
    PlayerEntity --> PlayerStats : serializes
