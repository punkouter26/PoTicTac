@page "/diag"
@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.SignalR.Client
@inject HttpClient Http
@inject ILogger<Diag> Logger
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>PoTicTac - Diagnostics</PageTitle>

<link href="css/diag.css" rel="stylesheet" />

<div class="diag-container">
    <h1 class="diag-title">System Diagnostics</h1>

    <div class="diag-content">
        <div class="health-grid">
            <div class="health-item">
                <h4>API Health Check</h4>
                <p>Status: <span class="@GetStatusClass(apiHealthStatus)">@apiHealthStatus</span></p>
                <small>@apiHealthDetails</small>
            </div>
            
            <div class="health-item">
                <h4>Storage Health Check</h4>
                <p>Status: <span class="@GetStatusClass(storageHealthStatus)">@storageHealthStatus</span></p>
                <small>@storageHealthDetails</small>
            </div>
            
            <div class="health-item">
                <h4>Players API</h4>
                <p>Status: <span class="@GetStatusClass(playersApiStatus)">@playersApiStatus</span></p>
                <small>@playersApiDetails</small>
            </div>
            
            <div class="health-item">
                <h4>SignalR Hub</h4>
                <p>Status: <span class="@GetStatusClass(signalRStatus)">@signalRStatus</span></p>
                <small>@signalRDetails</small>
            </div>
            
            <div class="health-item">
                <h4>Internet Connection</h4>
                <p>Status: <span class="@GetStatusClass(internetStatus)">@internetStatus</span></p>
                <small>@internetDetails</small>
            </div>
        </div>

        <div class="diag-actions">
            <button class="diag-button" @onclick="RefreshAllChecks" disabled="@isRefreshing">
                @(isRefreshing ? "Refreshing..." : "Refresh All Checks")
            </button>
            <a href="/" class="diag-button">Back to Game</a>
        </div>
    </div>
</div>

@code {
    private string apiHealthStatus = "Checking...";
    private string apiHealthDetails = "";
    private string storageHealthStatus = "Checking...";
    private string storageHealthDetails = "";
    private string playersApiStatus = "Checking...";
    private string playersApiDetails = "";
    private string signalRStatus = "Checking...";
    private string signalRDetails = "";
    private string internetStatus = "Checking...";
    private string internetDetails = "";
    private bool isRefreshing = false;
    
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        await RefreshAllChecks();
    }

    private string GetStatusClass(string status)
    {
        return status switch
        {
            "Healthy" => "status-healthy",
            "Checking..." => "status-checking",
            _ => "status-unhealthy"
        };
    }

    private async Task RefreshAllChecks()
    {
        isRefreshing = true;
        // Reset all statuses
        apiHealthStatus = storageHealthStatus = playersApiStatus = signalRStatus = internetStatus = "Checking...";
        apiHealthDetails = storageHealthDetails = playersApiDetails = signalRDetails = internetDetails = "";
        StateHasChanged();

        // Run all checks concurrently
        var tasks = new[]
        {
            CheckApiHealth(),
            CheckStorageHealth(),
            CheckPlayersApi(),
            CheckSignalRHub(),
            CheckInternetConnection()
        };

        await Task.WhenAll(tasks);
        isRefreshing = false;
        StateHasChanged();
    }

    private async Task CheckApiHealth()
    {
        try
        {
            var response = await Http.GetAsync("/api/health");
            if (response.IsSuccessStatusCode || response.StatusCode == System.Net.HttpStatusCode.ServiceUnavailable)
            {
                var healthResponse = await response.Content.ReadFromJsonAsync<HealthResponse>();
                if (healthResponse != null)
                {
                    apiHealthStatus = healthResponse.Status == "Healthy" ? "Healthy" : "Unhealthy";
                    apiHealthDetails = $"Status: {healthResponse.Status}, Duration: {healthResponse.TotalDuration:F0}ms";
                }
                else
                {
                    apiHealthStatus = "Unhealthy";
                    apiHealthDetails = "Failed to parse health response";
                }
            }
            else
            {
                apiHealthStatus = "Unhealthy";
                apiHealthDetails = $"HTTP {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            apiHealthStatus = "Unhealthy";
            apiHealthDetails = $"Error: {ex.Message}";
            Logger.LogError(ex, "Error checking API health.");
        }
    }

    private async Task CheckStorageHealth()
    {
        try
        {
            var response = await Http.GetAsync("/api/health");
            if (response.IsSuccessStatusCode || response.StatusCode == System.Net.HttpStatusCode.ServiceUnavailable)
            {
                var healthResponse = await response.Content.ReadFromJsonAsync<HealthResponse>();
                if (healthResponse != null)
                {
                    var storageCheck = healthResponse.Checks?.FirstOrDefault(c => c.Name == "AzureTableStorage");
                    if (storageCheck != null)
                    {
                        storageHealthStatus = storageCheck.Status == "Healthy" ? "Healthy" : "Unhealthy";
                        storageHealthDetails = $"{storageCheck.Description ?? "Azure Table Storage"} ({storageCheck.Duration:F0}ms)";
                    }
                    else
                    {
                        storageHealthStatus = "Unknown";
                        storageHealthDetails = "Storage check not found in health response";
                    }
                }
                else
                {
                    storageHealthStatus = "Unhealthy";
                    storageHealthDetails = "Failed to parse health response";
                }
            }
            else
            {
                storageHealthStatus = "Unhealthy";
                storageHealthDetails = $"Health endpoint returned {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            storageHealthStatus = "Unhealthy";
            storageHealthDetails = $"Error: {ex.Message}";
            Logger.LogError(ex, "Error checking storage health.");
        }
    }

    private async Task CheckPlayersApi()
    {
        try
        {
            // Test the players API endpoints
            var getAllResponse = await Http.GetAsync("/api/players");
            var leaderboardResponse = await Http.GetAsync("/api/players/leaderboard");
            
            if (getAllResponse.IsSuccessStatusCode && leaderboardResponse.IsSuccessStatusCode)
            {
                playersApiStatus = "Healthy";
                playersApiDetails = "All endpoints responding correctly";
            }
            else
            {
                playersApiStatus = "Unhealthy";
                playersApiDetails = $"GetAll: {getAllResponse.StatusCode}, Leaderboard: {leaderboardResponse.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            playersApiStatus = "Unhealthy";
            playersApiDetails = $"Error: {ex.Message}";
            Logger.LogError(ex, "Error checking Players API.");
        }
    }

    private async Task CheckSignalRHub()
    {
        try
        {
            // Dispose existing connection if any
            if (hubConnection != null)
            {
                await hubConnection.DisposeAsync();
            }

            // Create new SignalR connection
            hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("/gamehub"))
                .Build();

            // Start the connection
            await hubConnection.StartAsync();
            
            if (hubConnection.State == HubConnectionState.Connected)
            {
                signalRStatus = "Healthy";
                signalRDetails = "SignalR connection established successfully";
            }
            else
            {
                signalRStatus = "Unhealthy";
                signalRDetails = $"Connection state: {hubConnection.State}";
            }
        }
        catch (Exception ex)
        {
            signalRStatus = "Unhealthy";
            signalRDetails = $"Error: {ex.Message}";
            Logger.LogError(ex, "Error checking SignalR hub.");
        }
    }

    private async Task CheckInternetConnection()
    {
        try
        {
            // For a hosted Blazor WebAssembly app, we don't need external connectivity checks
            // The client is served by the same server that hosts the API
            internetStatus = "Healthy";
            internetDetails = "Not applicable for hosted Blazor WebAssembly";
            await Task.CompletedTask; // Satisfy async requirement
        }
        catch (Exception ex)
        {
            internetStatus = "Unhealthy";
            internetDetails = $"Error: {ex.Message}";
            Logger.LogError(ex, "Error checking internet connection.");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    public class HealthResponse
    {
        public string Status { get; set; } = string.Empty;
        public double TotalDuration { get; set; }
        public List<HealthCheckItem>? Checks { get; set; }
    }

    public class HealthCheckItem
    {
        public string Name { get; set; } = string.Empty;
        public string Status { get; set; } = string.Empty;
        public string? Description { get; set; }
        public double Duration { get; set; }
        public string? Exception { get; set; }
    }
}
