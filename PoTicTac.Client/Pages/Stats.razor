@page "/stats"
@using PoTicTac.Client.Services
@using PoTicTac.Client.Models
@inject StatisticsService StatisticsService
@inject NavigationManager Navigation

<PageTitle>PoTicTac - Statistics</PageTitle>

<link href="css/stats.css" rel="stylesheet" />

<div class="stats-container">
    <h1 class="stats-title">Player Statistics</h1>

    @if (isLoading)
    {
        <div class="stats-loading">
            <p>Loading statistics...</p>
        </div>
    }
    else if (playerStats == null || !playerStats.Any())
    {
        <div class="stats-content">
            <div class="no-data-message">
                <h3>No Statistics Available</h3>
                <p>Play some games to see your statistics!</p>
                <p>Statistics will be saved automatically after each game.</p>
            </div>
            <div style="text-align: center;">
                <a href="/" class="stats-back-button">Back to Game</a>
            </div>
        </div>
    }
    else
    {
        <div class="stats-content">
            <!-- Overall Summary Section -->
            <div class="stats-section">
                <h2 class="stats-section-title">Overall Summary</h2>
                <div class="summary-cards">
                    <div class="summary-card">
                        <div class="summary-card-title">Total Games</div>
                        <div class="summary-card-value">@totalGames</div>
                    </div>
                    <div class="summary-card">
                        <div class="summary-card-title">Total Wins</div>
                        <div class="summary-card-value">@totalWins</div>
                    </div>
                    <div class="summary-card">
                        <div class="summary-card-title">Total Losses</div>
                        <div class="summary-card-value">@totalLosses</div>
                    </div>
                    <div class="summary-card">
                        <div class="summary-card-title">Total Draws</div>
                        <div class="summary-card-value">@totalDraws</div>
                    </div>
                </div>
            </div>

            <!-- Leaderboard Section -->
            <div class="stats-section">
                <h2 class="stats-section-title">Leaderboard - Top Players</h2>
                @if (leaderboard != null && leaderboard.Any())
                {
                    <table class="stats-table">
                        <thead>
                            <tr>
                                <th>Rank</th>
                                <th>Player</th>
                                <th>Win Rate</th>
                                <th>Games</th>
                                <th>Wins</th>
                                <th>Losses</th>
                                <th>Draws</th>
                                <th>Streak</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < leaderboard.Count; i++)
                            {
                                var player = leaderboard[i];
                                var rankClass = i == 0 ? "leaderboard-rank-1" : i == 1 ? "leaderboard-rank-2" : i == 2 ? "leaderboard-rank-3" : "leaderboard-rank";
                                <tr>
                                    <td class="@rankClass">@(i + 1)</td>
                                    <td>@player.Name</td>
                                    <td>@((player.Stats.WinRate * 100).ToString("F1"))%</td>
                                    <td>@player.Stats.TotalGames</td>
                                    <td>@player.Stats.Wins</td>
                                    <td>@player.Stats.Losses</td>
                                    <td>@player.Stats.Draws</td>
                                    <td>@player.Stats.WinStreak</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <p style="text-align: center; color: #0f0;">No leaderboard data available.</p>
                }
            </div>

            <!-- All Players Section -->
            <div class="stats-section">
                <h2 class="stats-section-title">All Players</h2>
                <table class="stats-table">
                    <thead>
                        <tr>
                            <th>Player</th>
                            <th>Games</th>
                            <th>Wins</th>
                            <th>Losses</th>
                            <th>Draws</th>
                            <th>Win Rate</th>
                            <th>Win Streak</th>
                            <th>Avg Moves</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var player in playerStats.OrderByDescending(p => p.Stats.WinRate))
                        {
                            <tr>
                                <td>@player.Name</td>
                                <td>@player.Stats.TotalGames</td>
                                <td>@player.Stats.Wins</td>
                                <td>@player.Stats.Losses</td>
                                <td>@player.Stats.Draws</td>
                                <td>@((player.Stats.WinRate * 100).ToString("F1"))%</td>
                                <td>@player.Stats.WinStreak</td>
                                <td>@player.Stats.AverageMovesPerGame.ToString("F1")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Back Button -->
            <div style="text-align: center;">
                <a href="/" class="stats-back-button">Back to Game</a>
            </div>
        </div>
    }
</div>

@code {
    private List<PlayerStatsDto>? playerStats;
    private List<PlayerStatsDto>? leaderboard;
    private bool isLoading = true;

    private int totalGames;
    private int totalWins;
    private int totalLosses;
    private int totalDraws;

    protected override async Task OnInitializedAsync()
    {
        await LoadStatistics();
    }

    private async Task LoadStatistics()
    {
        isLoading = true;
        try
        {
            playerStats = await StatisticsService.GetAllPlayerStatistics();
            leaderboard = await StatisticsService.GetLeaderboard(10);

            if (playerStats != null && playerStats.Any())
            {
                totalGames = playerStats.Sum(p => p.Stats.TotalGames);
                totalWins = playerStats.Sum(p => p.Stats.Wins);
                totalLosses = playerStats.Sum(p => p.Stats.Losses);
                totalDraws = playerStats.Sum(p => p.Stats.Draws);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading statistics: {ex.Message}");
            // Set empty lists to avoid null reference
            playerStats = new List<PlayerStatsDto>();
            leaderboard = new List<PlayerStatsDto>();
        }
        finally
        {
            isLoading = false;
        }
    }
}
